spring.application.name=Bisa

# H2 Database Configuration for local testing
# spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
# spring.datasource.driver-class-name=org.h2.Driver
# spring.datasource.username=sa
# spring.datasource.password=
# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# spring.h2.console.enabled=true
# spring.h2.console.path=/h2-console
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.show-sql=true

# PostgreSQL Configuration - Using environment variables for security
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/bisa_db}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:postgres}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=${SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=${FORMAT_SQL:false}

# Firebase Configuration
firebase.service.account.key.path=${FIREBASE_SERVICE_ACCOUNT_PATH:classpath:firebase-service-account.json}

server.port=${SERVER_PORT:8080}

# CORS config for development
# (actual CORS config will be in a config class)

# Logging Configuration - Production ready
logging.level.com.bisa=${LOG_LEVEL:INFO}
logging.level.org.springframework.security=${SECURITY_LOG_LEVEL:WARN}
logging.level.org.hibernate.SQL=${HIBERNATE_SQL_LOG:false}
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=${HIBERNATE_BINDER_LOG:false}

# Fact-Checking Configuration
factcheck.ai.service.url=${OPENAI_API_URL:https://api.openai.com/v1/chat/completions}
factcheck.ai.service.api-key=${OPENAI_API_KEY:}
factcheck.enable-mock=${FACTCHECK_MOCK:true}

# Production Security Settings
spring.security.user.name=${ADMIN_USERNAME:admin}
spring.security.user.password=${ADMIN_PASSWORD:admin123}
